package Aplicacion;

import Config.HibernateUtil;
import Modelo.*;
import java.awt.Color;
import java.awt.Font;
import javax.swing.*;
import java.util.ArrayList;
import org.hibernate.query.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author diego
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    private static SessionFactory sessionFactory;

    public Menu() {
        sessionFactory = HibernateUtil.getSessionFactory();
        initComponents();
        getContentPane().setBackground(Color.DARK_GRAY);
        jButton1.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton2.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton3.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton4.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton5.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton6.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton7.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton8.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton9.setFont(new Font("Monospaced", Font.BOLD, 24));
        jButton10.setFont(new Font("Monospaced", Font.BOLD, 24));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("1. Información de los socios (HQL)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("2. Información de los socios (SQL Nativo)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("3. Información de los socios (Consulta nombrada)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("4. Nombre y teléfono de los socios");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("5. Nombre y categoría de los socios");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("6. Nombre de monitor por nick");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("7. Información de socio por nombre");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("8. Información de actividades por día y cuota");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("9. Información de socios por categoría (HQL)");

        jButton10.setText("10. Información de socios por categoría (SQL nativo)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(503, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFrame frame = new JFrame("1. Información de los socios (HQL)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("FROM Socio s", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Numero", "Nombre", "DNI", "FechaNac", "Telefono", "Correo", "FechaEnt", "Categoria");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFrame frame = new JFrame("2. Información de los socios (SQL Nativo)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNativeQuery("SELECT * FROM SOCIO s", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Numero", "Nombre", "DNI", "FechaNac", "Telefono", "Correo", "FechaEnt", "Categoria");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFrame frame = new JFrame("3. Información de los socios (Consulta nombrada)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNamedQuery("Socio.findAll", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Numero", "Nombre", "DNI", "FechaNac", "Telefono", "Correo", "FechaEnt", "Categoria");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFrame frame = new JFrame("4. Nombre y teléfono de los socios");
        Output.run(frame, 720, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.nombre, s.telefono FROM Socio s");
            ArrayList<Object[]> socios = (ArrayList<Object[]>) consulta.list();
            String str = String.format("%-30s %-9s\n", "Nombre", "Telefono");
            System.out.println(str);
            for (Object[] s : socios) {
                str = String.format("%-30s %-9s", s[0].toString(), s[1].toString());
                System.out.println(str);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ArrayList<Character> categorias = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT s.categoria FROM Socio s");
            categorias = (ArrayList<Character>) consulta.list();
            for (char c : categorias) {
                System.out.println(c);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        char cat = '-';
        try {
            Object input = JOptionPane.showInputDialog(this, "Categoria:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                if (str.length() != 1) {
                    throw new Exception();
                } else {
                    str = str.toUpperCase();
                    cat = str.charAt(0);
                    if (!categorias.contains(cat)) {
                        throw new Exception();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Categoria no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (categorias.contains(cat)) {
            JFrame frame = new JFrame("5. Nombre y categoría de los socios");
            Output.run(frame, 720, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("SELECT s.nombre, s.categoria FROM Socio s WHERE s.categoria = '" + cat + "'");
                ArrayList<Object[]> socios = (ArrayList<Object[]>) consulta.list();
                String str = String.format("%-30s %8s\n", "Nombre", "Categoria");
                System.out.println(str);
                for (Object[] s : socios) {
                    str = String.format("%-30s %9s", s[0].toString(), s[1].toString());
                    System.out.println(str);
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
     }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        ArrayList<String> nicks = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT m.nick FROM Monitor m");
            lista = (ArrayList<String>) consulta.list();
            for (String n : lista) {
                System.out.println(n);
                nicks.add(n.toUpperCase());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        String nick = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Nick:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input).toUpperCase();
                if (!nicks.contains(str)) {
                    throw new Exception();
                } else {
                    nick = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nick no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (nicks.contains(nick)) {
            JFrame frame = new JFrame("6. Nombre de monitor por nick");
            Output.run(frame, 720, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("SELECT m.nombre, m.nick FROM Monitor m WHERE m.nick = '" + nick + "'");
                Object[] m = (Object[]) consulta.getSingleResult();
                String str = String.format("%-30s %-8s\n", "Nombre", "Nick");
                System.out.println(str);
                str = String.format("%-30s %-8s", m[0].toString(), m[1].toString());
                System.out.println(str);
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        ArrayList<String> nombres = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.nombre FROM Socio s");
            lista = (ArrayList<String>) consulta.list();
            for (String n : lista) {
                System.out.println(n);
                nombres.add(n.toUpperCase());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        String nombre = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Nombre:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input).toUpperCase();
                if (!nombres.contains(str)) {
                    throw new Exception();
                } else {
                    nombre = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nombre no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (nombres.contains(nombre)) {
            JFrame frame = new JFrame("7. Información de socio por nombre");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("FROM Socio s WHERE s.nombre = '" + nombre + "'");
                Socio s = (Socio) consulta.getSingleResult();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Numero", "Nombre", "DNI", "FechaNac", "Telefono", "Correo", "FechaEnt", "Categoria");
                System.out.println(str);
                System.out.println(s.mostrar());
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ArrayList<String> dias = new ArrayList<>();
        ArrayList<String> listaD = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT a.dia FROM Actividad a");
            listaD = (ArrayList<String>) consulta.getResultList();
            for (String d : listaD) {
                System.out.println(d);
                dias.add(d.toUpperCase());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        String dia = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Dia:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input).toUpperCase();
                if (!dias.contains(str)) {
                    throw new Exception();
                } else {
                    dia = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Dia no valido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        int cuota = 0;
        try {
            Object input = JOptionPane.showInputDialog(this, "Cuota:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                int ct = Integer.parseInt(str);
                cuota = ct;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cuota no valida.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        ArrayList<Actividad> actividades = new ArrayList<>();
        if (dias.contains(dia)) {
            JFrame frame = new JFrame("8. Información de actividades por día y cuota");
            Output.run(frame, 1200, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("FROM Actividad a WHERE a.dia = '" + dia + "' AND a.precioBaseMes > " + cuota);
                actividades = (ArrayList<Actividad>) consulta.getResultList();
                String str = String.format("%-4s %-15s %-9s %-4s %-15s %-30s\n", "ID", "Nombre", "Dia", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : actividades) {
                    System.out.println(a.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    // End of variables declaration//GEN-END:variables
}
