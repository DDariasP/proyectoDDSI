package Aplicacion;

import Config.HibernateUtil;
import Modelo.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.text.SimpleDateFormat;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Set;
import org.hibernate.query.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 * Crea el menú.
 *
 * @author Diego Francisco Darias Pino
 */
public class MenuP1 extends javax.swing.JFrame {

    private static SessionFactory sessionFactory;

    public MenuP1() {
        sessionFactory = HibernateUtil.getSessionFactory();
        initComponents();
        jb11.setName("11");
        jb12.setName("12");
        jb13.setName("13");
        jb14.setName("14");
        jb15.setName("15");
        jb16.setName("16");
        jb17.setName("17");
        jb18.setName("18");
        jb19.setName("19");
        jb20.setName("20");
        jb21.setName("21");
        jb22.setName("22");
        jb23.setName("23");
        jb24.setName("24");
        jb25.setName("25");
        jb26.setName("26");
        jb27.setName("27");
        jb28.setName("28");
        jb29.setName("29");
        jb30.setName("30");
        for (Component comp : this.getContentPane().getComponents()) {
            String nom = comp.getName();
            if (comp instanceof JButton && nom != null) {
                JButton jb = (JButton) comp;
                int num = Integer.parseInt(nom);
                if (num % 2 == 0) {
                    jb.setForeground(Color.BLACK);
                    jb.setBackground(Color.LIGHT_GRAY);
                } else {
                    jb.setForeground(Color.WHITE);
                    jb.setBackground(Color.DARK_GRAY);
                }
                jb.setFont(new Font("Monospaced", Font.BOLD, 24));
            }
        }
        getContentPane().setBackground(Color.BLACK);
        UIManager.put("OptionPane.messageFont", new Font("Monospaced", Font.BOLD, 24));
        UIManager.put("OptionPane.messageForeground", Color.LIGHT_GRAY);
        UIManager.put("OptionPane.buttonFont", new Font("Monospaced", Font.BOLD, 24));
        UIManager.put("Button.background", Color.LIGHT_GRAY);
        UIManager.put("OptionPane.background", Color.DARK_GRAY);
        UIManager.put("Panel.background", Color.DARK_GRAY);
        UIManager.put("TextField.font", new Font("Monospaced", Font.BOLD, 24));
        UIManager.put("TextField.background", Color.LIGHT_GRAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jb11 = new javax.swing.JButton();
        jb12 = new javax.swing.JButton();
        jb13 = new javax.swing.JButton();
        jb14 = new javax.swing.JButton();
        jb15 = new javax.swing.JButton();
        jb16 = new javax.swing.JButton();
        jb17 = new javax.swing.JButton();
        jb18 = new javax.swing.JButton();
        jb19 = new javax.swing.JButton();
        jb20 = new javax.swing.JButton();
        jb21 = new javax.swing.JButton();
        jb22 = new javax.swing.JButton();
        jb23 = new javax.swing.JButton();
        jb24 = new javax.swing.JButton();
        jb25 = new javax.swing.JButton();
        jb26 = new javax.swing.JButton();
        jb27 = new javax.swing.JButton();
        jb28 = new javax.swing.JButton();
        jb29 = new javax.swing.JButton();
        jb30 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jb11.setText("1. Información de los socios (HQL)");
        jb11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb11ActionPerformed(evt);
            }
        });

        jb12.setText("2. Información de los socios (SQL Nativo)");
        jb12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb12ActionPerformed(evt);
            }
        });

        jb13.setText("3. Información de los socios (Consulta nombrada)");
        jb13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb13ActionPerformed(evt);
            }
        });

        jb14.setText("4. Nombre y teléfono de los socios");
        jb14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb14ActionPerformed(evt);
            }
        });

        jb15.setText("5. Nombre y categoría de los socios");
        jb15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb15ActionPerformed(evt);
            }
        });

        jb16.setText("6. Nombre de monitor por nick");
        jb16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb16ActionPerformed(evt);
            }
        });

        jb17.setText("7. Información de socio por nombre");
        jb17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb17ActionPerformed(evt);
            }
        });

        jb18.setText("8. Información de actividades por día y cuota");
        jb18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb18ActionPerformed(evt);
            }
        });

        jb19.setText("9. Información de socios por categoría (HQL)");
        jb19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb19ActionPerformed(evt);
            }
        });

        jb20.setText("10. Información de socios por categoría (SQL nativo)");
        jb20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb20ActionPerformed(evt);
            }
        });

        jb21.setText("11. Inserción de socio");
        jb21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb21ActionPerformed(evt);
            }
        });

        jb22.setText("12. Borrado de socio por DNI");
        jb22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb22ActionPerformed(evt);
            }
        });

        jb23.setText("13. Actividad de la que es responsable un monitor por DNI");
        jb23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb23ActionPerformed(evt);
            }
        });

        jb24.setText("14. Actividades en las que está inscrito un socio por DNI");
        jb24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb24ActionPerformed(evt);
            }
        });

        jb25.setText("15. Socios inscritos en una actividad por actividad");
        jb25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb25ActionPerformed(evt);
            }
        });

        jb26.setText("16. Inscripción de un socio en una actividad");
        jb26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb26ActionPerformed(evt);
            }
        });

        jb27.setText("17. Baja de un socio de una actividad");
        jb27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb27ActionPerformed(evt);
            }
        });

        jb28.setText("18. Horario de un monitor por el DNI");
        jb28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb28ActionPerformed(evt);
            }
        });

        jb29.setText("19. Cuota que paga un socio");
        jb29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb29ActionPerformed(evt);
            }
        });

        jb30.setText("20. Socios que sean mayores de una edad");
        jb30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jb20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addComponent(jb19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jb21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb23, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addComponent(jb24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jb12, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jb22, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb11)
                    .addComponent(jb21))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb12)
                    .addComponent(jb22))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb13)
                    .addComponent(jb23))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb14)
                    .addComponent(jb24))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb15)
                    .addComponent(jb25))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb16)
                    .addComponent(jb26))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb17)
                    .addComponent(jb27))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb18)
                    .addComponent(jb28))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb19)
                    .addComponent(jb29))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb20)
                    .addComponent(jb30))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // 1. Información de los socios (HQL)
    private void jb11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb11ActionPerformed
        JFrame frame = new JFrame("1. Información de los socios (HQL)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("FROM Socio s", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb11ActionPerformed

    // 2. Información de los socios (SQL Nativo)
    private void jb12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb12ActionPerformed
        JFrame frame = new JFrame("2. Información de los socios (SQL Nativo)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNativeQuery("SELECT * FROM SOCIO s", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb12ActionPerformed

    // 3. Información de los socios (Consulta nombrada)
    private void jb13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb13ActionPerformed
        JFrame frame = new JFrame("3. Información de los socios (Consulta nombrada)");
        Output.run(frame, 2160, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNamedQuery("Socio.findAll", Socio.class);
            ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
            String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
            System.out.println(str);
            for (Socio s : socios) {
                System.out.println(s.mostrar());
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación; " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb13ActionPerformed

    // 4. Nombre y teléfono de los socios
    private void jb14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb14ActionPerformed
        JFrame frame = new JFrame("4. Nombre y teléfono de los socios");
        Output.run(frame, 720, 480);
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.nombre, s.telefono FROM Socio s");
            ArrayList<Object[]> socios = (ArrayList<Object[]>) consulta.list();
            String str = String.format("%-30s %-9s\n", "Nombre", "Teléfono");
            System.out.println(str);
            for (Object[] s : socios) {
                str = String.format("%-30s %-9s", s[0].toString(), s[1].toString());
                System.out.println(str);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb14ActionPerformed

    // 5. Nombre y categoría de los socios
    private void jb15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb15ActionPerformed
        ArrayList<Character> categorias = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT s.categoria FROM Socio s");
            categorias = (ArrayList<Character>) consulta.list();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        char cat = '-';
        try {
            Object input = JOptionPane.showInputDialog(this, "Categoría:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                if (str.length() != 1) {
                    throw new Exception();
                } else {
                    str = Filtro.mayus(str);
                    str = Filtro.tildes(str);
                    cat = str.charAt(0);
                    if (!categorias.contains(cat)) {
                        throw new Exception();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Categoría no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (categorias.contains(cat)) {
            JFrame frame = new JFrame("5. Nombre y categoría de los socios");
            Output.run(frame, 720, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("SELECT s.nombre, s.categoria FROM Socio s WHERE s.categoria = '" + cat + "'");
                ArrayList<Object[]> socios = (ArrayList<Object[]>) consulta.list();
                String str = String.format("%-30s %8s\n", "Nombre", "Categoría");
                System.out.println(str);
                for (Object[] s : socios) {
                    str = String.format("%-30s %9s", s[0].toString(), s[1].toString());
                    System.out.println(str);
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
     }//GEN-LAST:event_jb15ActionPerformed

    // 6. Nombre de monitor por nick
    private void jb16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb16ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT m.nick FROM Monitor m");
            lista = (ArrayList<String>) consulta.list();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        ArrayList<String> nicks = Filtro.listaMayus(lista);
        nicks = Filtro.listaTildes(nicks);

        String nick = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Nick:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!nicks.contains(str)) {
                    throw new Exception();
                } else {
                    nick = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nick no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (nicks.contains(nick)) {
            JFrame frame = new JFrame("6. Nombre de monitor por nick");
            Output.run(frame, 720, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("SELECT m.nombre, m.nick FROM Monitor m WHERE m.nick = '" + nick + "'");
                Object[] m = (Object[]) consulta.getSingleResult();
                String str = String.format("%-35s %-8s\n", "Nombre", "Nick");
                System.out.println(str);
                str = String.format("%-35s %-8s", m[0].toString(), m[1].toString());
                System.out.println(str);
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb16ActionPerformed

    // 7. Información de socio por nombre
    private void jb17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb17ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.nombre FROM Socio s");
            lista = (ArrayList<String>) consulta.list();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        ArrayList<String> nombres = Filtro.listaMayus(lista);
        nombres = Filtro.listaTildes(nombres);

        String nombre = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Nombre:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!nombres.contains(str)) {
                    throw new Exception();
                } else {
                    nombre = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nombre no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (nombres.contains(nombre)) {
            JFrame frame = new JFrame("7. Información de socio por nombre");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("FROM Socio s WHERE s.nombre = '" + nombre + "'");
                Socio s = (Socio) consulta.getSingleResult();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                System.out.println(s.mostrar());
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb17ActionPerformed

    // 8. Información de actividades por día y cuota
    private void jb18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb18ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT a.dia FROM Actividad a");
            lista = (ArrayList<String>) consulta.getResultList();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        ArrayList<String> dias = Filtro.listaMayus(lista);
        dias = Filtro.listaTildes(dias);

        String dia = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Día:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!dias.contains(str)) {
                    throw new Exception();
                } else {
                    dia = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Día no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        int cuota = 0;
        try {
            Object input = JOptionPane.showInputDialog(this, "Cuota:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                int ct = Integer.parseInt(str);
                cuota = ct;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cuota no válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        ArrayList<Actividad> actividades = new ArrayList<>();
        if (dias.contains(dia)) {
            JFrame frame = new JFrame("8. Información de actividades por día y cuota");
            Output.run(frame, 1200, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("FROM Actividad a WHERE a.dia = '" + dia + "' AND a.precioBaseMes > " + cuota);
                actividades = (ArrayList<Actividad>) consulta.getResultList();
                String str = String.format("%-4s %-15s %-9s %-5s %-15s %-30s\n", "ID", "Nombre", "Día", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : actividades) {
                    System.out.println(a.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb18ActionPerformed

    // 9. Información de socios por categoría (HQL)
    private void jb19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb19ActionPerformed
        ArrayList<Character> categorias = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT s.categoria FROM Socio s");
            categorias = (ArrayList<Character>) consulta.list();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        char cat = '-';
        try {
            Object input = JOptionPane.showInputDialog(this, "Categoría:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                if (str.length() != 1) {
                    throw new Exception();
                } else {
                    str = Filtro.mayus(str);
                    str = Filtro.tildes(str);
                    cat = str.charAt(0);
                    if (!categorias.contains(cat)) {
                        throw new Exception();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Categoría no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (categorias.contains(cat)) {
            JFrame frame = new JFrame("9. Información de socios por categoría (HQL)");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createNamedQuery("Socio.findByCategoria", Socio.class);
                consulta.setParameter("categoria", cat);
                ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio s : socios) {
                    System.out.println(s.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb19ActionPerformed

    // 10. Información de socios por categoría (SQL nativo)
    private void jb20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb20ActionPerformed
        ArrayList<Character> categorias = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT DISTINCT s.categoria FROM Socio s");
            categorias = (ArrayList<Character>) consulta.list();
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }

        char cat = '-';
        try {
            Object input = JOptionPane.showInputDialog(this, "Categoría:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                if (str.length() != 1) {
                    throw new Exception();
                } else {
                    str = Filtro.mayus(str);
                    str = Filtro.tildes(str);
                    cat = str.charAt(0);
                    if (!categorias.contains(cat)) {
                        throw new Exception();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Categoría no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (categorias.contains(cat)) {
            JFrame frame = new JFrame("10. Información de socios por categoría (SQL nativo)");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createNamedQuery("Socio.PorCategoria", Socio.class);
                consulta.setParameter("categoria", cat);
                ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio s : socios) {
                    System.out.println(s.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb20ActionPerformed

    // 11. Inserción de socio
    private void jb21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb21ActionPerformed
        Socio s = null;
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            String nom;
            Object input = JOptionPane.showInputDialog(this, "Nombre completo:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                nom = str;
            } else {
                throw new Exception();
            }
            String dni;
            input = JOptionPane.showInputDialog(this, "DNI:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                dni = str;
            } else {
                throw new Exception();
            }
            s = new Socio("S0XX", nom, dni, "XX/XX/19XX", "123456789", "nombre@gmail.com", "XX/XX/2024", 'A');
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Input no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (s != null) {
            JFrame frame = new JFrame("11. Inserción de socio");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                sesion.saveOrUpdate(s);
                tr.commit();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                System.out.println(s.mostrar());
                System.out.println("\nSocio añadido correctamente.");
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la inserión: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb21ActionPerformed

    // 12. Borrado de socio por DNI
    private void jb22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb22ActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        ArrayList<String> listaDNI = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.numeroSocio, s.dni FROM Socio s");
            ArrayList<Object[]> socios = (ArrayList<Object[]>) consulta.list();
            for (Object[] s : socios) {
                lista.add((String) s[0]);
                listaDNI.add((String) s[1]);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        listaDNI = Filtro.listaMayus(listaDNI);
        listaDNI = Filtro.listaTildes(listaDNI);

        String dni = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "DNI:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!listaDNI.contains(str)) {
                    throw new Exception();
                } else {
                    dni = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DNI no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Socio s = null;
        if (listaDNI.contains(dni)) {
            JFrame frame = new JFrame("12. Borrado de socio por DNI");
            Output.run(frame, 2160, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                int pos = listaDNI.indexOf(dni);
                String num = lista.get(pos);
                s = sesion.get(Socio.class, num);
                sesion.delete(s);
                tr.commit();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                System.out.println(s.mostrar());
                System.out.println("\nSocio borrado correctamente.");
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en el borrado: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb22ActionPerformed

    // 13. Actividad de la que es responsable un monitor por DNI
    private void jb23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb23ActionPerformed
        ArrayList<String> listaCod = new ArrayList<>();
        ArrayList<String> listaDNI = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT m.codMonitor, m.dni FROM Monitor m");
            ArrayList<Object[]> lista = (ArrayList<Object[]>) consulta.list();
            for (Object[] o : lista) {
                listaCod.add((String) o[0]);
                listaDNI.add((String) o[1]);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        listaDNI = Filtro.listaMayus(listaDNI);
        listaDNI = Filtro.listaTildes(listaDNI);

        String dni = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "DNI:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!listaDNI.contains(str)) {
                    throw new Exception();
                } else {
                    dni = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DNI no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Monitor m;
        if (listaDNI.contains(dni)) {
            JFrame frame = new JFrame("13. Actividad de la que es responsable el monitor con DNI " + dni);
            Output.run(frame, 1200, 240);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                int pos = listaDNI.indexOf(dni);
                String cod = listaCod.get(pos);
                m = sesion.get(Monitor.class, cod);
                Set<Actividad> act = m.getActividades();
                String str = String.format("%-4s %-15s %-9s %-5s %-15s %-30s\n", "ID", "Nombre", "Día", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : act) {
                    System.out.println(a.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb23ActionPerformed

    // 14. Actividades en las que está inscrito un socio por DNI
    private void jb24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb24ActionPerformed
        ArrayList<String> listaNum = new ArrayList<>();
        ArrayList<String> listaDNI = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT s.numeroSocio, s.dni FROM Socio s");
            ArrayList<Object[]> lista = (ArrayList<Object[]>) consulta.list();
            for (Object[] o : lista) {
                listaNum.add((String) o[0]);
                listaDNI.add((String) o[1]);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        listaDNI = Filtro.listaMayus(listaDNI);
        listaDNI = Filtro.listaTildes(listaDNI);

        String dni = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "DNI:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!listaDNI.contains(str)) {
                    throw new Exception();
                } else {
                    dni = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DNI no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Socio s;
        if (listaDNI.contains(dni)) {
            JFrame frame = new JFrame("14. Actividades en las que está inscrito el socio con DNI " + dni);
            Output.run(frame, 1200, 360);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                int pos = listaDNI.indexOf(dni);
                String num = listaNum.get(pos);
                s = sesion.get(Socio.class, num);
                Set<Actividad> act = s.getActividades();
                String str = String.format("%-4s %-15s %-9s %-5s %-15s %-30s\n", "ID", "Nombre", "Día", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : act) {
                    System.out.println(a.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb24ActionPerformed

    // 15. Socios inscritos en una actividad por nombre de la actividad
    private void jb25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb25ActionPerformed
        ArrayList<String> listaCod = new ArrayList<>();
        ArrayList<String> listaNom = new ArrayList<>();
        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createQuery("SELECT a.idActividad, a.nombre FROM Actividad a");
            ArrayList<Object[]> lista = (ArrayList<Object[]>) consulta.list();
            for (Object[] o : lista) {
                listaCod.add((String) o[0]);
                listaNom.add((String) o[1]);
            }
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
        listaNom = Filtro.listaMayus(listaNom);
        listaNom = Filtro.listaTildes(listaNom);

        String nom = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Actividad:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                if (!listaNom.contains(str)) {
                    throw new Exception();
                } else {
                    nom = str;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Actividad no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Actividad a;
        if (listaNom.contains(nom)) {
            JFrame frame = new JFrame("15. Socios inscritos en " + nom);
            Output.run(frame, 2160, 480);
            sesion = sessionFactory.openSession();
            tr = sesion.beginTransaction();
            try {
                int pos = listaNom.indexOf(nom);
                String cod = listaCod.get(pos);
                a = sesion.get(Actividad.class, cod);
                Set<Socio> socios = a.getSocios();
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio s : socios) {
                    System.out.println(s.mostrar());
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb25ActionPerformed

    // 16. Inscripción de un socio en una actividad
    private void jb26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb26ActionPerformed
        String codS = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Código de socio:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                codS = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        String codA = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Código de actividad:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                codA = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Socio s = sesion.get(Socio.class, codS);
            Actividad a = sesion.get(Actividad.class, codA);
            if (s != null && a != null) {
                a.altaSocio(s);
                sesion.saveOrUpdate(a);
                sesion.saveOrUpdate(s);
                JFrame frame = new JFrame("16. Inscripción de " + s.getNumeroSocio() + " en " + a.getNombre());
                Output.run(frame, 2160, 480);
                System.out.println(a.getNombre() + ":\n");
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio socio : a.getSocios()) {
                    System.out.println(socio.mostrar());
                }
                System.out.println("\nSocio inscrito correctamente.");
                tr.commit();
            } else {
                throw new Exception("Socio/Actividad no encontrado(s)");
            }
        } catch (Exception e) {
            tr.rollback();
            JFrame frame = new JFrame("Error");
            Output.run(frame, 2160, 240);
            System.out.println("Error en la inserión: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb26ActionPerformed

    // 17. Baja de un socio de una actividad
    private void jb27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb27ActionPerformed
        String codS = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Código de socio:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                codS = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        String codA = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Código de actividad:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                codA = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Socio s = sesion.get(Socio.class, codS);
            Actividad a = sesion.get(Actividad.class, codA);
            if (s != null && a != null) {
                a.bajaSocio(s);
                sesion.saveOrUpdate(a);
                sesion.saveOrUpdate(s);
                JFrame frame = new JFrame("17. Baja de " + s.getNumeroSocio() + " de " + a.getNombre());
                Output.run(frame, 2160, 480);
                System.out.println(a.getNombre() + ":\n");
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio socio : a.getSocios()) {
                    System.out.println(socio.mostrar());
                }
                System.out.println("\nSocio dado de baja correctamente.");
                tr.commit();
            } else {
                throw new Exception("Socio/Actividad no encontrado(s)");
            }
        } catch (Exception e) {
            tr.rollback();
            JFrame frame = new JFrame("Error");
            Output.run(frame, 2160, 240);
            System.out.println("Error en la inserión: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb27ActionPerformed

    // 18. Horario de un monitor por el DNI
    private void jb28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb28ActionPerformed
        String dniM = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "DNI de monitor:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                dniM = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DNI no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNamedQuery("Monitor.findByDni", Monitor.class);
            consulta.setParameter("dni", dniM);
            Monitor m = (Monitor) consulta.getSingleResult();
            if (m != null) {
                JFrame frame = new JFrame("18. Horario de " + m.getDni());
                Output.run(frame, 2160, 480);
                System.out.println(m.getNombre() + ":\n");
                String str = String.format("%-4s %-15s %-9s %-5s %-15s %-30s\n", "ID", "Nombre", "Día", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : m.getActividades()) {
                    System.out.println(a.mostrar());
                }
                tr.commit();
            } else {
                throw new Exception("Monitor no encontrado");
            }
        } catch (Exception e) {
            tr.rollback();
            JFrame frame = new JFrame("Error");
            Output.run(frame, 2160, 240);
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb28ActionPerformed

    // 19. Cuota que paga un socio
    private void jb29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb29ActionPerformed
        String codS = "";
        try {
            Object input = JOptionPane.showInputDialog(this, "Código de socio:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                str = Filtro.mayus(str);
                str = Filtro.tildes(str);
                codS = str;
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Session sesion = sessionFactory.openSession();
        Transaction tr = sesion.beginTransaction();
        try {
            Query consulta = sesion.createNamedQuery("Socio.findByNumeroSocio", Socio.class);
            consulta.setParameter("numeroSocio", codS);
            Socio s = (Socio) consulta.getSingleResult();
            if (s != null) {
                JFrame frame = new JFrame("19. Cuota que paga " + s.getNumeroSocio());
                Output.run(frame, 2160, 480);
                System.out.println(s.getNombre() + ":\n");
                int total = 0;
                String str = String.format("%-4s %-15s %-9s %-5s %-15s %-30s\n", "ID", "Nombre", "Día", "Hora", "PrecioBaseMes", "MonitorResponsable");
                System.out.println(str);
                for (Actividad a : s.getActividades()) {
                    System.out.println(a.mostrar());
                    total = total + a.getPrecioBaseMes();
                }
                System.out.println("\nTOTAL: " + total + "€");
                tr.commit();
            } else {
                throw new Exception("Socio no encontrado");
            }
        } catch (Exception e) {
            tr.rollback();
            JFrame frame = new JFrame("Error");
            Output.run(frame, 2160, 240);
            System.out.println("Error en la recuperación: " + e.getMessage());
        } finally {
            if (sesion != null && sesion.isOpen()) {
                sesion.close();
            }
        }
    }//GEN-LAST:event_jb29ActionPerformed

    // 20. Socios que sean mayores de una edad
    private void jb30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb30ActionPerformed
        int edad = -1;
        try {
            Object input = JOptionPane.showInputDialog(this, "Edad de socio:", "Input", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String str = String.valueOf(input);
                edad = Integer.parseInt(str);
            } else {
                throw new Exception();
            }
            if (edad < 1) {
                edad = -1;
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Edad no válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (edad != -1) {
            Session sesion = sessionFactory.openSession();
            Transaction tr = sesion.beginTransaction();
            try {
                Query consulta = sesion.createQuery("FROM Socio s", Socio.class);
                ArrayList<Socio> socios = (ArrayList<Socio>) consulta.getResultList();
                consulta = sesion.createNativeQuery("SELECT CURRENT_DATE");
                Date fecha = (Date) consulta.getSingleResult();
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String hoy = formato.format(fecha);
                JFrame frame = new JFrame("20. Socios que sean mayores de " + edad + " años");
                Output.run(frame, 2160, 480);
                System.out.println("Hoy: " + hoy + "\n");
                String str = String.format("%-6s %-30s %-9s %-10s %-9s %-32s %-10s %8s\n", "Número", "Nombre", "DNI", "FechaNac", "Teléfono", "Correo", "FechaEnt", "Categoría");
                System.out.println(str);
                for (Socio s : socios) {
                    int edadS = s.getEdad(hoy);
                    if (edadS > edad) {
                        System.out.println(s.mostrar());
                    }
                }
                tr.commit();
            } catch (Exception e) {
                tr.rollback();
                JFrame frame = new JFrame("Error");
                Output.run(frame, 2160, 240);
                System.out.println("Error en la recuperación: " + e.getMessage());
            } finally {
                if (sesion != null && sesion.isOpen()) {
                    sesion.close();
                }
            }
        }
    }//GEN-LAST:event_jb30ActionPerformed

    public static void main(String args[]) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jb11;
    private javax.swing.JButton jb12;
    private javax.swing.JButton jb13;
    private javax.swing.JButton jb14;
    private javax.swing.JButton jb15;
    private javax.swing.JButton jb16;
    private javax.swing.JButton jb17;
    private javax.swing.JButton jb18;
    private javax.swing.JButton jb19;
    private javax.swing.JButton jb20;
    private javax.swing.JButton jb21;
    private javax.swing.JButton jb22;
    private javax.swing.JButton jb23;
    private javax.swing.JButton jb24;
    private javax.swing.JButton jb25;
    private javax.swing.JButton jb26;
    private javax.swing.JButton jb27;
    private javax.swing.JButton jb28;
    private javax.swing.JButton jb29;
    private javax.swing.JButton jb30;
    // End of variables declaration//GEN-END:variables
}
